<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: task.proto

namespace Protos;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;
use GPBMetadata\Task;

/**
 * Protobuf type <code>protos.OracleDelta</code>
 */
class OracleDelta extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>map&lt;uint64, uint64&gt; commits = 1;</code>
     */
    private $commits;
    /**
     * <code>repeated uint64 aborts = 2;</code>
     */
    private $aborts;
    /**
     * <pre>
     * implement tmax.
     * </pre>
     *
     * <code>uint64 max_pending = 3;</code>
     */
    private $max_pending = 0;

    public function __construct() {
        Task::initOnce();
        parent::__construct();
    }

    /**
     * <code>map&lt;uint64, uint64&gt; commits = 1;</code>
     */
    public function getCommits()
    {
        return $this->commits;
    }

    /**
     * <code>map&lt;uint64, uint64&gt; commits = 1;</code>
     */
    public function setCommits(&$var)
    {
        $arr = GPBUtil::checkMapField($var, \Google\Protobuf\Internal\GPBType::UINT64, \Google\Protobuf\Internal\GPBType::UINT64);
        $this->commits = $arr;

        return $this;
    }

    /**
     * <code>repeated uint64 aborts = 2;</code>
     */
    public function getAborts()
    {
        return $this->aborts;
    }

    /**
     * <code>repeated uint64 aborts = 2;</code>
     */
    public function setAborts(&$var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::UINT64);
        $this->aborts = $arr;

        return $this;
    }

    /**
     * <pre>
     * implement tmax.
     * </pre>
     *
     * <code>uint64 max_pending = 3;</code>
     */
    public function getMaxPending()
    {
        return $this->max_pending;
    }

    /**
     * <pre>
     * implement tmax.
     * </pre>
     *
     * <code>uint64 max_pending = 3;</code>
     */
    public function setMaxPending($var)
    {
        GPBUtil::checkUint64($var);
        $this->max_pending = $var;

        return $this;
    }

}

