<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: task.proto

namespace Protos;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;
use GPBMetadata\Task;

/**
 * Protobuf type <code>protos.Group</code>
 */
class Group extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * Raft ID is the key.
     * </pre>
     *
     * <code>map&lt;uint64, .protos.Member&gt; members = 1;</code>
     */
    private $members;
    /**
     * <pre>
     * Predicate + others are key.
     * </pre>
     *
     * <code>map&lt;string, .protos.Tablet&gt; tablets = 2;</code>
     */
    private $tablets;

    public function __construct() {
        Task::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * Raft ID is the key.
     * </pre>
     *
     * <code>map&lt;uint64, .protos.Member&gt; members = 1;</code>
     */
    public function getMembers()
    {
        return $this->members;
    }

    /**
     * <pre>
     * Raft ID is the key.
     * </pre>
     *
     * <code>map&lt;uint64, .protos.Member&gt; members = 1;</code>
     */
    public function setMembers(&$var)
    {
        $arr = GPBUtil::checkMapField($var, \Google\Protobuf\Internal\GPBType::UINT64, \Google\Protobuf\Internal\GPBType::MESSAGE, Member::class);
        $this->members = $arr;

        return $this;
    }

    /**
     * <pre>
     * Predicate + others are key.
     * </pre>
     *
     * <code>map&lt;string, .protos.Tablet&gt; tablets = 2;</code>
     */
    public function getTablets()
    {
        return $this->tablets;
    }

    /**
     * <pre>
     * Predicate + others are key.
     * </pre>
     *
     * <code>map&lt;string, .protos.Tablet&gt; tablets = 2;</code>
     */
    public function setTablets(&$var)
    {
        $arr = GPBUtil::checkMapField($var, \Google\Protobuf\Internal\GPBType::STRING, \Google\Protobuf\Internal\GPBType::MESSAGE, Tablet::class);
        $this->tablets = $arr;

        return $this;
    }

}

