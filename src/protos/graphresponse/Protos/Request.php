<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: graphresponse.proto

namespace Protos;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>protos.Request</code>
 */
class Request extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>string query = 1;</code>
     */
    private $query = '';
    /**
     * <code>.protos.Mutation mutation = 2;</code>
     */
    private $mutation = null;
    /**
     * <code>.protos.SchemaRequest schema = 3;</code>
     */
    private $schema = null;
    /**
     * <pre>
     * Support for GraphQL like variables.
     * </pre>
     *
     * <code>map&lt;string, string&gt; vars = 4;</code>
     */
    private $vars;

    public function __construct() {
        \GPBMetadata\Graphresponse::initOnce();
        parent::__construct();
    }

    /**
     * <code>string query = 1;</code>
     */
    public function getQuery()
    {
        return $this->query;
    }

    /**
     * <code>string query = 1;</code>
     */
    public function setQuery($var)
    {
        GPBUtil::checkString($var, True);
        $this->query = $var;

        return $this;
    }

    /**
     * <code>.protos.Mutation mutation = 2;</code>
     */
    public function getMutation()
    {
        return $this->mutation;
    }

    /**
     * <code>.protos.Mutation mutation = 2;</code>
     */
    public function setMutation(&$var)
    {
        GPBUtil::checkMessage($var, \Protos\Mutation::class);
        $this->mutation = $var;

        return $this;
    }

    /**
     * <code>.protos.SchemaRequest schema = 3;</code>
     */
    public function getSchema()
    {
        return $this->schema;
    }

    /**
     * <code>.protos.SchemaRequest schema = 3;</code>
     */
    public function setSchema(&$var)
    {
        GPBUtil::checkMessage($var, \Protos\SchemaRequest::class);
        $this->schema = $var;

        return $this;
    }

    /**
     * <pre>
     * Support for GraphQL like variables.
     * </pre>
     *
     * <code>map&lt;string, string&gt; vars = 4;</code>
     */
    public function getVars()
    {
        return $this->vars;
    }

    /**
     * <pre>
     * Support for GraphQL like variables.
     * </pre>
     *
     * <code>map&lt;string, string&gt; vars = 4;</code>
     */
    public function setVars(&$var)
    {
        $arr = GPBUtil::checkMapField($var, \Google\Protobuf\Internal\GPBType::STRING, \Google\Protobuf\Internal\GPBType::STRING);
        $this->vars = $arr;

        return $this;
    }

}

